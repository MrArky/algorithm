/**
 * 题目：跳跃游戏 II
 * 
 * 给定一个非负整数数组，你最初位于数组的第一个位置。
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 * 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
 * 
 * 示例:
 *  输入: [2,3,1,1,4]
    输出: 2
    解释: 跳到最后一个位置的最小跳跃数是 2。
         从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
 *
 * 说明:
 * 假设你总是可以到达数组的最后一个位置。
 */

/**
 * @param {number[]} nums
 * @return {number}
 */
var jump = function (nums) {
    var maxIdx = time = 0;
    for (let i = 0, j = 0; i < nums.length-1; i++) {
        maxIdx = Math.max(i + nums[i], maxIdx);
        if (i == j) {
            j = maxIdx;
            ++time;
        }
    }
    return time;
};

/**
 * 思路：
 * 每次选择所能跳到的位置里面能往后跳到最远距离的位置。
 * 
 *            ___________
 *           |    ___    |
 *           |   |   |   |
 * 如：[ 2 , 3 , 1 , 1 , 4]
 *       |   |   |_1能跳到的位置为第二个1所在的位置
 *       |   |
 *       |   |_3能跳到的位置为4
 *       |_能跳到的位置为3和1所在的位置
 * 
 * 因此在2能跳到的位置中选择3的位置作为目标位置。
 * 
 * 时间复杂度：O(n)
 */