/**
 * 题目：下一个排列
 * 
 * 实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。
 * 
 * 如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。
 * 
 * 必须原地修改，只允许使用额外常数空间。
 * 
 * 以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
 * 
 *  1,2,3 → 1,3,2
 *  3,2,1 → 1,2,3
 *  1,1,5 → 1,5,1
 */


/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */
var nextPermutation = function (nums) {
    if (nums.length < 2) return nums;
    for (let i = nums.length - 1, temp, status = true; i >= -1 && status; i--) {
        for (let j = i + 1; j < nums.length; j++) {
            if (nums[j] >= nums[j + 1]) {
                temp = nums[j + 1];
                nums[j + 1] = nums[j];
                nums[j] = temp;
            }
            if (nums[i] < nums[j] && status) {
                temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                status = false;
            }
        }
    }
};

/**
 * 思路：
 * 
 * 其实在本题中，如果排列中的数字较少，很难看出其规律，因此，不妨制作下面一个排列：
 * 
 * [1,5,4,3,2,1] ==> [2,1,1,3,4,5]
 * 2>1
 * [1,5,4,3,1,2] 变小了，不成立
 * 3>2>1
 * [1,5,4,1,2,3] 变小了，不成立
 * 4>3>2>1
 * [1,5,1,2,3,4] 变小了，不成立
 * 5>4>3>2>1
 * [1,1,2,3,4,5] 变小了，不成立：推演，如果本排列不存在第一个数，当所有不成立(当前排列已经最大)时，则返回升序排列
 * 1=1
 * 1<2 1有变大的空间，和2的值交换
 * [2,1,1,3,4,5] 变大了(且2后面为从小到大升序：即最小值)成立。
 * 
 * 在本题中需要做两个判断：
 * 1.该排列有没有变大的空间？
 * 回答：
 *      1.1.如果以当前排列的任意位置i的值作为参考值，这个值后面的所有值的最大值都比他小，
 *          那么这个位置的值没有变大的空间。
 *      1.2.如果这个值的位置已经是第一位，那么这个排列没有变大的空间。
 * 2.该排列如果有变大的空间，那么应该变多大？
 *      2.1如果以当前排列的任意位置i的值作为参考值，这个值后面的所有值有一个值刚好比他大，那么这个值就是i变大的空间。
 *         找到了需要变大的值，并且将其与i的值进行交换，为了保证交换后i后面的排列是该排列能组成的最小值，
 *         还需要将i后面的排列变成最小(即从小到大升序)
 * 
 * 时间复杂度：O(n^2)
 */