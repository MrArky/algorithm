/**
 * 题目：移除元素
 * 
 * 给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。
 * 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。
 * 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
 * 
 * 示例 1:
 * 
 *  给定 nums = [3,2,2,3], val = 3,
 *  函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。
 *  你不需要考虑数组中超出新长度后面的元素。
 * 
 * 示例 2:
 * 
 *  给定 nums = [0,1,2,2,3,0,4,2], val = 2,
 *  函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。
 *  注意这五个元素可为任意顺序。
 *  你不需要考虑数组中超出新长度后面的元素。
 * 
 * 说明:
 * 
 *  为什么返回数值是整数，但输出的答案是数组呢?
 *  请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。
 *  你可以想象内部操作如下:
 * 
 *  // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝
 *  int len = removeElement(nums, val);
 * 
 *  // 在函数里修改输入数组对于调用者是可见的。
 *  // 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。
 * 
 *      for (int i = 0; i < len; i++) {
 *          print(nums[i]);
 *      }
 * 
 */

//题解一：
/**
 * @param {number[]} nums
 * @param {number} val
 * @return {number}
 */
var removeElement = function (nums, val) {
    for (let i = 0; i < nums.length;) {
        if (nums[i] == val) nums.splice(i, 1);
        else i++;
    }
    return nums.length;
};

/**
 * 题解一思路：
 * 
 * 通过每次数组元素进行验证，没事别到一个与val相等的值，就移除
 * 注意：一旦元素被移除，这是的索引不变（下一个元素的索引值自动变为当前索引值），见下图
 *  val = 3
 *  数组：[ 3 , 2 , 2 , 3 ]    当遍历第一个元素时，需要删除，删除后结果：[ 2 , 2 , 3 ]
 *  索引：  0   1   2   3                                       索引：  0   1   2
 * 
 * 最后直接返回当前数组的长度即可
 * 
 * 时间复杂度O(n)
 */

//题解二：
/**
 * @param {number[]} nums
 * @param {number} val
 * @return {number}
 */
var removeElement = function (nums, val) {
    let prev = 0;
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] == val) continue;
        nums[prev] = nums[i];
        prev++;
    }
    return prev;
};

/**
 * 题解二思路：
 *
 * 此解法用到了“双指针”
 *
 * 1.两个指针（prev，i）最先都指向第一个元素，即索引0
 * 2.移动i指针的位置
 * 3.如果nums[i]值不等于val，就将nums[i]的值放在nums[prev]的位置，同时将prev指向的位置向后移一位
 * 4.当i指向位置为数组最后一个元素时，这时数组被更新为在prev之前的所有元素都不等于val
 *
 * 举个例子：数组 [0,1,2,2,3,0,4,2]；val:2
 * 第一次(i==0)：nums[i]!=2 将nums[prev]等于nums[i]的值,值移动i和prev位置：
 * [0,1,2,2,3,0,4,2]                [0,1,2,2,3,0,4,2]
 *  i                     ===>         i
 *  prev                               prev
 * 第二次(i==1)：nums[i]!=2 将nums[prev]等于nums[i]的值,值移动i和prev位置：
 * [0,1,2,2,3,0,4,2]                [0,1,2,2,3,0,4,2]
 *    i                   ===>           i
 *    prev                               prev
 * 第三次(i==2)：nums[i]==2 只移动i的位置
 * [0,1,2,2,3,0,4,2]                [0,1,2,2,3,0,4,2]
 *      i                 ===>             i
 *      prev                             prev
 * 第四次(i==3)：nums[i]==2 只移动i的位置
 * [0,1,2,2,3,0,4,2]                [0,1,2,2,3,0,4,2]
 *        i               ===>               i
 *      prev                               prev
 * 第五次(i==4)：nums[i]!=2 将nums[prev]等于nums[i]的值,值移动i和prev位置：
 * [0,1,2,2,3,0,4,2]                [0,1,3,2,3,0,4,2]
 *          i             ===>                 i
 *      prev                               prev
 * 第五次(i==5)：nums[i]!=2 将nums[prev]等于nums[i]的值,值移动i和prev位置：
 * [0,1,3,2,3,0,4,2]                [0,1,3,0,3,0,4,2]
 *            i             ===>                 i
 *        prev                               prev
 * 第五次(i==5)：nums[i]!=2 将nums[prev]等于nums[i]的值,值移动i和prev位置：
 * [0,1,3,0,3,0,4,2]                [0,1,3,0,4,0,4,2]
 *              i             ===>                 i
 *          prev                               prev
 *
 * 需要的结果为[0,1,3,0,4]长度即为prev
 *
 * 时间复杂度：O(n)
 */