/**
 * 题目：螺旋矩阵 II
 * 给定一个正整数 n，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的正方形矩阵。
 * 示例:
 * 
 *  输入: 3
    输出:
    [
    [ 1, 2, 3 ],
    [ 8, 9, 4 ],
    [ 7, 6, 5 ]
    ]
 *
 */



/**
 * @param {number} n
 * @return {number[][]}
 */
var generateMatrix = function (n) {
    const arr = eval('(' + JSON.stringify(new Array(n).fill(new Array(n).fill(1))) + ')');
    for (let o = 0, i = o, j = o, z = 0, num = 1, state = 0; z < (n - o - 2) * 2 + (n - o) * 2; z++ , num++) {
        if (state == 0) {
            if (j < n - o - 1) arr[i][j] = num, j++;
            else {
                if (i < n - o - 1) arr[i][j] = num, i++;
                else arr[i][j] = num, state = 1;
            }
        }
        else {
            if (j > o) arr[i][--j] = num;
            else {
                if (i > o + 1) {
                    arr[--i][j] = num;
                    if (i == o + 1) {
                        i = j = ++o;
                        z = state = 0;
                    }
                }
            }
        }
    }
    return arr;
};


/**
 * 思路：
 * 优先生成n*n的数组
 * 一圈一圈地填充：
 * 核心算法：每一圈数的元素个数为：(n - 2) * 2 + (n) * 2 —— n为当前圈所对应二维数组的长度
 * o代表了当前填充数组的圈索引，从外到里，从0开始。每一圈开始填充的位置为 i=o,j=o的位置。
 * 
 *             ┏----------┓
 *           [ 1, 2, 3 ], |
          ┏->[ 8, 9, 4 ], |
          |  [ 7, 6, 5 ]  |
 *        ┗---------------┛ 
 * 
 *               ┏---------------------┓
 *            [  1,     2,   3,    4], |
 *                      ┏-------┓      |
 *         ┏->[ 12,  ┏->13, 14, |  5], |
 *         |  [ 11,  |  16, 15, |  6], |
 *         |         ┗----------┛      |
 *         |  [ 10,     9,   8,    7], |
 *         ┗---------------------------┛
 * 
 * 
 *          
 */