/**
 * 题目：55. 跳跃游戏
 * 给定一个非负整数数组，你最初位于数组的第一个位置。
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 * 判断你是否能够到达最后一个位置。
 * 
 * 示例 1:
 * 
 *  输入: [2,3,1,1,4]
    输出: true
    解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
 *
 * 示例 2:
 * 
 *  输入: [3,2,1,0,4]
    输出: false
    解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。
 *
 */


/**
 * @param {number[]} nums
 * @return {boolean}
 */
var canJump = function (nums) {
    if (nums.length == 1) return true;
    for (let i = 0; i < nums.length; i++) {
        if (nums[i] == 0 && i != nums.length - 1) {
            let j = i - 1, n = 1;
            while (nums[j] == undefined || nums[j] <= n) {
                j-- , n++;
                if (j < 0) return false;
            }
        }
    }
    return true;
};

/**
 * 思路：
 * 以此遍历nums，如果出现0：
 * 1.如果0已经在最后的位置，那么返回true；
 * 2.如果0不是在最后的位置，那么这时在这个位置上是无法到达终点的，那么就依次看他前面的数能不能
 * 跳到它的后面去：
 * 2.1.如果前面的数找到索引位置为负数时都没找到，那么这个数组nums是无法跳跃完的
 * 2.2.如果找到了，就从找到的位置继续遍历nums，直到到达最后则返回true。
 */