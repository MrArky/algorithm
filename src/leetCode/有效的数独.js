/**
 * 题目：有效的数独
 * 
 * 判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
 * 
 *  1.数字 1-9 在每一行只能出现一次。
 *  2.数字 1-9 在每一列只能出现一次。
 *  3.数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
 * 
 *  "5","3",".",".","7",".",".",".","."
    "6",".",".","1","9","5",".",".","."
    ".","9","8",".",".",".",".","6","."
    "8",".",".",".","6",".",".",".","3"
    "4",".",".","8",".","3",".",".","1"
    "7",".",".",".","2",".",".",".","6"
    ".","6",".",".",".",".","2","8","."
    ".",".",".","4","1","9",".",".","5"
    ".",".",".",".","8",".",".","7","9"
 *
 * 上图是一个部分填充的有效的数独。
 * 
 *  数独部分空格内已填入了数字，空白格用 '.' 表示。
 * 
 * 示例 1:
 * 
 *  输入:
 *   [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
 * 
 *  输出: true
 * 
 *  输入:
 *  [
      ["8","3",".",".","7",".",".",".","."],
      ["6",".",".","1","9","5",".",".","."],
      [".","9","8",".",".",".",".","6","."],
      ["8",".",".",".","6",".",".",".","3"],
      ["4",".",".","8",".","3",".",".","1"],
      ["7",".",".",".","2",".",".",".","6"],
      [".","6",".",".",".",".","2","8","."],
      [".",".",".","4","1","9",".",".","5"],
      [".",".",".",".","8",".",".","7","9"]
    ]
 *
 * 输出: false
 * 解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
 * 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * 
 * 说明:
 *  一个有效的数独（部分已被填充）不一定是可解的。
 *  只需要根据以上规则，验证已经填入的数字是否有效即可。
 *  给定数独序列只包含数字 1-9 和字符 '.' 。
 *  给定数独永远是 9x9 形式的。
 */



/**
 * @param {character[][]} board
 * @return {boolean}
 */
var isValidSudoku = function (board) {
    var setRow = [], setColumn = [], setBox = [];
    for (let i = 0; i < 9; i++) {
        setRow[i] = new Set();
        setColumn[i] = new Set();
        setBox[i] = new Set();
    }
    for (let row = 0; row < 9; row++) {
        for (let cloumn = 0; cloumn < 9; cloumn++) {
            //算出目前坐标在哪个box中
            let boxIndex = (~~(row / 3)) * 3 + ~~(cloumn / 3);
            let value = board[row][cloumn];
            if (value != '.') {
                if (setRow[row].has(value)) return false;
                else setRow[row].add(value);
                if (setColumn[cloumn].has(value)) return false;
                else setColumn[cloumn].add(value);
                if (setBox[boxIndex].has(value)) return false;
                else setBox[boxIndex].add(value);
            }
        }
    }
    return true;
};


/**
 * 思路：
 * 假设每个数的位置为[row][column]
 * 将所有的列和所有的行以及所有的3*3宫格模拟出来setRow[]、setColumn[]、setBx[]
 * 那么任何一个数在三种情况下不能重复：
 * 1.setRow[row]中不能有重复项
 * 2.setColumn[column]中不能有重复项
 * 3.setBx[boxIndex]中不能有重复项：boxIndex=(~~(row / 3)) * 3 + ~~(cloumn / 3)
 */